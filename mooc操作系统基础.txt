取指执行
PC/IP -> IR

CS为代码段寄存器，IP为指令指针寄存器。

实模式的寻址CS:IP(CS左移4位+IP)和保护模式不一样！

(1)X86 PC刚开机时CPU处于实模式
(2)开机时，CS=0xFFFF；IP=0x0000
(3)寻址0xFFFF0(ROM BIOS映射区；实模式的寻址CS:IP，CS左移4位+IP)
(4)检查RAM，键盘，显示器，软硬磁盘
(5)将磁盘0磁道0扇区读入0x7c00处
(6)设置CS=0x07c0，IP=0x0000

引导扇区代码：bootsect.s (汇编代码)

进入保护模式
保护模式的寻址:根据CS查表+IP

jmpi 0,8 

(1)as86汇编:能产生16位代码的Intel 8086(386)汇编
	mov ax, cs	//cs->ax，目标操作数在前
(2)GNU as汇编:产生32位代码，使用AT&T系统V语法
    movl var, %eax  //(var)->%eax
    movb -4(%ebp), %al  //取出一字节
(3)内嵌汇编:gcc编译X.c会产生中间结果as汇编文件X.s
    __asm__("汇编语句"
    :输处    
    :输入
    :破坏部分描述);
    
    __asm__("movb %%fs:%2, %%al"
    :"=a"(_res)
    :"0"(seg),"m"(*(addr))
    )

    0或者空表示使用与相应输出一样的寄存机；
    a表示使用eax，并编号%0；
    %2表示addr，m表示使用内存。


system_call


将内核程序和用户程序隔离！
区分内核态和用户态：一种处理器“硬件设计”
当前程序执行在什么态？由于CS:IP是当前指令，所以用CS的最低两位来表示：0是内核态，3是用户态。

比较CPL和DPL，CPL要比DPL小，才能进入内核态。

Intel x86, 中断指令int
int指令将使CS中的CPL改成0，”进入内核“。
这是用户程序发起的调用内核代码的唯一方式。

系统调用的核心：
(1)用户程序中包含一段包含int指令的代码
(2)操作系统写中断处理，获取想调程序的编号
(3)操作系统根据编号执行相应代码



